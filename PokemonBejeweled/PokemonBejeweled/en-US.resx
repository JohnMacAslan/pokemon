<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Done" xml:space="preserve">
    <value>DONE!</value>
  </data>
  <data name="Five_Minutes" xml:space="preserve">
    <value>Five minutes</value>
  </data>
  <data name="Game_Title" xml:space="preserve">
    <value>The Cutesiest Bejeweled EVAR!!!</value>
  </data>
  <data name="Hint" xml:space="preserve">
    <value>Hint</value>
  </data>
  <data name="Instructions" xml:space="preserve">
    <value>Instructions</value>
  </data>
  <data name="Instruction_Content" xml:space="preserve">
    <value>The goal of the game is to accumulate points by making rows and columns of the same pokemon. This is accomplished by swapped adjacent pokemon to make rows or columns of three. Bonus points are awarded for rows or columns of more than three. Once a row or column is made, those pokemon will be captured and disappear. The pokemon above those will fall down and new ones will fall in from the top of the screen. 

If a row or column of four is made, the swapped pokemon will evolve into its first evolutionary form. This pokemon can be used with other pokemon in its evolution chain. When used, it will capture all the pokemon surrounding it. 

If a row or column of five is made, the swapped pokemon will become a Ditto. Ditto can be swapped at any time with any other pokemon. When this is done, all of the pokemon in the evolution chain of the pokemon that Ditto was swapped with will be captured. Increasingly more points are awarded as the number of pokemon captured by swapping a Ditto increases. 

If a row or column of six is made, the left most (if a row) or upper most (if a column) pokemon will evolve into its second evolutionary form. This pokmeon can be used with other pokemon in its evolution chain. When used, it will capture all the pokemon in the same row and column of the board that it is in. 

Begin a new game by clicking the new game button. This will reset your score and the timer. 

The time limit can be set with the options at the left of the screen. 

Pausing a game will pause the timer and hide the screen from view. The button can be clicked again to resume. 

Asking for a hint will show a move if there are any moves left. This costs points, so use it wisely! If there are no moves left, the button will say so and no points will be deducted.</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Languages</value>
  </data>
  <data name="Main_Menu" xml:space="preserve">
    <value>Main Menu</value>
  </data>
  <data name="New_Game" xml:space="preserve">
    <value>New Game</value>
  </data>
  <data name="No_Moves" xml:space="preserve">
    <value>No moves!</value>
  </data>
  <data name="One_Minute" xml:space="preserve">
    <value>One minute</value>
  </data>
  <data name="Pause" xml:space="preserve">
    <value>Pause</value>
  </data>
  <data name="Quit" xml:space="preserve">
    <value>Quit</value>
  </data>
  <data name="Resume" xml:space="preserve">
    <value>Resume</value>
  </data>
  <data name="Scoreboard" xml:space="preserve">
    <value>Scoreboard</value>
  </data>
  <data name="Ten_Minutes" xml:space="preserve">
    <value>Ten minutes</value>
  </data>
  <data name="Time_Left" xml:space="preserve">
    <value>Time Left</value>
  </data>
  <data name="Undo" xml:space="preserve">
    <value>Undo</value>
  </data>
  <data name="Unlimited" xml:space="preserve">
    <value>Unlimited</value>
  </data>
  <data name="Window_Title" xml:space="preserve">
    <value>Pokemon Bejeweled</value>
  </data>
</root>